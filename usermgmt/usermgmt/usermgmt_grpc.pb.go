// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: usermgmt.proto

package usermgmt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserManagementClient is the client API for UserManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserManagementClient interface {
	CreateNewUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*User, error)
	// server streaming
	GreetUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (UserManagement_GreetUserClient, error)
	// bi-directional streaming
	CreateMultipleUser(ctx context.Context, opts ...grpc.CallOption) (UserManagement_CreateMultipleUserClient, error)
}

type userManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewUserManagementClient(cc grpc.ClientConnInterface) UserManagementClient {
	return &userManagementClient{cc}
}

func (c *userManagementClient) CreateNewUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/usermgmt.UserManagement/CreateNewUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GreetUser(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (UserManagement_GreetUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserManagement_ServiceDesc.Streams[0], "/usermgmt.UserManagement/GreetUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &userManagementGreetUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserManagement_GreetUserClient interface {
	Recv() (*GreetManyTimesResponse, error)
	grpc.ClientStream
}

type userManagementGreetUserClient struct {
	grpc.ClientStream
}

func (x *userManagementGreetUserClient) Recv() (*GreetManyTimesResponse, error) {
	m := new(GreetManyTimesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userManagementClient) CreateMultipleUser(ctx context.Context, opts ...grpc.CallOption) (UserManagement_CreateMultipleUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserManagement_ServiceDesc.Streams[1], "/usermgmt.UserManagement/CreateMultipleUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &userManagementCreateMultipleUserClient{stream}
	return x, nil
}

type UserManagement_CreateMultipleUserClient interface {
	Send(*NewUser) error
	Recv() (*GreetManyTimesResponse, error)
	grpc.ClientStream
}

type userManagementCreateMultipleUserClient struct {
	grpc.ClientStream
}

func (x *userManagementCreateMultipleUserClient) Send(m *NewUser) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userManagementCreateMultipleUserClient) Recv() (*GreetManyTimesResponse, error) {
	m := new(GreetManyTimesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserManagementServer is the server API for UserManagement service.
// All implementations must embed UnimplementedUserManagementServer
// for forward compatibility
type UserManagementServer interface {
	CreateNewUser(context.Context, *NewUser) (*User, error)
	// server streaming
	GreetUser(*NewUser, UserManagement_GreetUserServer) error
	// bi-directional streaming
	CreateMultipleUser(UserManagement_CreateMultipleUserServer) error
	mustEmbedUnimplementedUserManagementServer()
}

// UnimplementedUserManagementServer must be embedded to have forward compatible implementations.
type UnimplementedUserManagementServer struct {
}

func (UnimplementedUserManagementServer) CreateNewUser(context.Context, *NewUser) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewUser not implemented")
}
func (UnimplementedUserManagementServer) GreetUser(*NewUser, UserManagement_GreetUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GreetUser not implemented")
}
func (UnimplementedUserManagementServer) CreateMultipleUser(UserManagement_CreateMultipleUserServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateMultipleUser not implemented")
}
func (UnimplementedUserManagementServer) mustEmbedUnimplementedUserManagementServer() {}

// UnsafeUserManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserManagementServer will
// result in compilation errors.
type UnsafeUserManagementServer interface {
	mustEmbedUnimplementedUserManagementServer()
}

func RegisterUserManagementServer(s grpc.ServiceRegistrar, srv UserManagementServer) {
	s.RegisterService(&UserManagement_ServiceDesc, srv)
}

func _UserManagement_CreateNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).CreateNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.UserManagement/CreateNewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).CreateNewUser(ctx, req.(*NewUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GreetUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NewUser)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserManagementServer).GreetUser(m, &userManagementGreetUserServer{stream})
}

type UserManagement_GreetUserServer interface {
	Send(*GreetManyTimesResponse) error
	grpc.ServerStream
}

type userManagementGreetUserServer struct {
	grpc.ServerStream
}

func (x *userManagementGreetUserServer) Send(m *GreetManyTimesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UserManagement_CreateMultipleUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserManagementServer).CreateMultipleUser(&userManagementCreateMultipleUserServer{stream})
}

type UserManagement_CreateMultipleUserServer interface {
	Send(*GreetManyTimesResponse) error
	Recv() (*NewUser, error)
	grpc.ServerStream
}

type userManagementCreateMultipleUserServer struct {
	grpc.ServerStream
}

func (x *userManagementCreateMultipleUserServer) Send(m *GreetManyTimesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userManagementCreateMultipleUserServer) Recv() (*NewUser, error) {
	m := new(NewUser)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserManagement_ServiceDesc is the grpc.ServiceDesc for UserManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usermgmt.UserManagement",
	HandlerType: (*UserManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewUser",
			Handler:    _UserManagement_CreateNewUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GreetUser",
			Handler:       _UserManagement_GreetUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateMultipleUser",
			Handler:       _UserManagement_CreateMultipleUser_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "usermgmt.proto",
}
